(ns simba.constants)

(def allowed-symbols
  (map symbol
       #{ "class" "chars" "class?" "coll?" "comment" "commute" "comp" "comparator" "compare" "complement" "concat" "cond" "cond->" "cond->>" "condp" "conj" "cons" "constantly" "contains?" "count" "cycle" "dec" "dec'" "decimal?" "disj" "descendants" "dissoc" "distinct" "distinct?" "do" "doall" "dotimes" "doto" "double" "double-array" "doubles" "drop" "drop-last" "drop-while" "empty" "empty?" "+'" "-" "-'" "->" "->>" "+" "."  "<" "<=" "=" "==" ">" ">=" "aget" "amap" "and" "apply" "as->" "assoc" "assoc-in" "binding" "boolean" "boolean-array" "booleans" "butlast" "case" "cast" "cat" "catch" "char" "char-array" "char?" "*" "*'" "even?" "every-pred" "every?" "extend" "false?" "filter" "filterv" "find" "first" "find-keyword" "flatten" "float" "float?" "for" "get" "get-in" "group-by" "hash" "identical?" "identity" "if" "if-not" "inc" "inc'" "int" "integer?" "interleave" "interpose" "into" "into-array" "isa?" "iterate" "juxt" "keep" "keep-indexed" "key" "keys" "keyword" "keyword?" "last" "list" "list*" "list?" "long" "loop" "map" "map-indexed" "map?" "map-entry?" "mapcat" "mapv" "max" "max-key" "merge" "merge-with" "min" "min-key" "mod" "neg?" "newline" "next" "nil?" "not" "not-any?" "not-empty" "not-every?" "not=" "nth" "nthnext" "nthrest" "num" "number?" "numerator" "odd?" "or" "partial" "partition" "partition-all" "partition-by" "peek" "pmap" "pop" "pos?" "quot" "quote" "rand" "rand-int" "rand-nth" "random-sample" "range" "ratio?" "rational?" "rationalize" "re-find" "re-groups" "re-matcher" "re-matches" "re-pattern" "re-seq" "recur" "record?" "reduce" "reduce-kv" "reduced" "reduced?" "reify" "rem" "repeat" "repeatedly" "replace" "replicate" "resolve" "rest" "reverse" "reversible?" "rseq" "rsubseq" "satisfies?" "second" "select-keys" "seq" "seq?" "sequence" "seque" "sequential?" "set?" "short" "some" "some->" "some->>" "some?" "sort" "sort-by" "sorted-map" "sorted-map-by" "sorted-set" "sorted-set-by" "sorted?" "spit" "split-at" "split-with" "str" "string?" "subs" "subseq" "subvec" "symbol" "symbol?" "take" "take-last" "take-nth" "take-while" "to-array" "transduce" "tree-seq" "true?" "update" "update-in" "val" "vals" "vec" "vector" "vector-of" "vector?" "when" "when-first" "when-not" "when-some" "while" "zero?" "zipmap" }))